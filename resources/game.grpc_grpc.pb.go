// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: game/game.grpc.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	ChangePlayerName(ctx context.Context, in *CChangePlayerName, opts ...grpc.CallOption) (*SChangePlayerName, error)
	CheckTime(ctx context.Context, in *CCheckTime, opts ...grpc.CallOption) (*SCheckTime, error)
	GetCumulativeLoginDays(ctx context.Context, in *CGetCumulativeLoginDays, opts ...grpc.CallOption) (*SGetCumulativeLoginDays, error)
	GetDiamondCount(ctx context.Context, in *CGetDiamondCount, opts ...grpc.CallOption) (*SGetDiamondCount, error)
	GetEnergyData(ctx context.Context, in *CGetEnergyData, opts ...grpc.CallOption) (*SGetEnergyData, error)
	GetGoldCount(ctx context.Context, in *CGetGoldCount, opts ...grpc.CallOption) (*SGetGoldCount, error)
	GetLevelExp(ctx context.Context, in *CGetLevelExp, opts ...grpc.CallOption) (*SGetLevelExp, error)
	GetMaterials(ctx context.Context, in *CGetMaterials, opts ...grpc.CallOption) (*SGetMaterials, error)
	GetOrderList(ctx context.Context, in *CGetOrderList, opts ...grpc.CallOption) (*SGetOrderList, error)
	GetPlayerName(ctx context.Context, in *CGetPlayerName, opts ...grpc.CallOption) (*SGetPlayerName, error)
	GetProfile(ctx context.Context, in *CGetProfile, opts ...grpc.CallOption) (*SGetProfile, error)
	GetResults(ctx context.Context, in *CGetResults, opts ...grpc.CallOption) (*SGetResults, error)
	Login(ctx context.Context, in *CLogin, opts ...grpc.CallOption) (*SLogin, error)
	Logout(ctx context.Context, in *CLogout, opts ...grpc.CallOption) (*SLogout, error)
	MergeGenerator(ctx context.Context, in *CMergeGenerator, opts ...grpc.CallOption) (*SMergeGenerator, error)
	PlayerOffline(ctx context.Context, in *CPlayerOffline, opts ...grpc.CallOption) (*SPlayerOffline, error)
	SyncModel(ctx context.Context, in *CSyncModel, opts ...grpc.CallOption) (*SSyncModel, error)
	UnlockMaterialSlot(ctx context.Context, in *CUnlockMaterialSlot, opts ...grpc.CallOption) (*SUnlockMaterialSlot, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) ChangePlayerName(ctx context.Context, in *CChangePlayerName, opts ...grpc.CallOption) (*SChangePlayerName, error) {
	out := new(SChangePlayerName)
	err := c.cc.Invoke(ctx, "/game.GameService/ChangePlayerName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CheckTime(ctx context.Context, in *CCheckTime, opts ...grpc.CallOption) (*SCheckTime, error) {
	out := new(SCheckTime)
	err := c.cc.Invoke(ctx, "/game.GameService/CheckTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetCumulativeLoginDays(ctx context.Context, in *CGetCumulativeLoginDays, opts ...grpc.CallOption) (*SGetCumulativeLoginDays, error) {
	out := new(SGetCumulativeLoginDays)
	err := c.cc.Invoke(ctx, "/game.GameService/GetCumulativeLoginDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetDiamondCount(ctx context.Context, in *CGetDiamondCount, opts ...grpc.CallOption) (*SGetDiamondCount, error) {
	out := new(SGetDiamondCount)
	err := c.cc.Invoke(ctx, "/game.GameService/GetDiamondCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetEnergyData(ctx context.Context, in *CGetEnergyData, opts ...grpc.CallOption) (*SGetEnergyData, error) {
	out := new(SGetEnergyData)
	err := c.cc.Invoke(ctx, "/game.GameService/GetEnergyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetGoldCount(ctx context.Context, in *CGetGoldCount, opts ...grpc.CallOption) (*SGetGoldCount, error) {
	out := new(SGetGoldCount)
	err := c.cc.Invoke(ctx, "/game.GameService/GetGoldCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetLevelExp(ctx context.Context, in *CGetLevelExp, opts ...grpc.CallOption) (*SGetLevelExp, error) {
	out := new(SGetLevelExp)
	err := c.cc.Invoke(ctx, "/game.GameService/GetLevelExp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetMaterials(ctx context.Context, in *CGetMaterials, opts ...grpc.CallOption) (*SGetMaterials, error) {
	out := new(SGetMaterials)
	err := c.cc.Invoke(ctx, "/game.GameService/GetMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetOrderList(ctx context.Context, in *CGetOrderList, opts ...grpc.CallOption) (*SGetOrderList, error) {
	out := new(SGetOrderList)
	err := c.cc.Invoke(ctx, "/game.GameService/GetOrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetPlayerName(ctx context.Context, in *CGetPlayerName, opts ...grpc.CallOption) (*SGetPlayerName, error) {
	out := new(SGetPlayerName)
	err := c.cc.Invoke(ctx, "/game.GameService/GetPlayerName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetProfile(ctx context.Context, in *CGetProfile, opts ...grpc.CallOption) (*SGetProfile, error) {
	out := new(SGetProfile)
	err := c.cc.Invoke(ctx, "/game.GameService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetResults(ctx context.Context, in *CGetResults, opts ...grpc.CallOption) (*SGetResults, error) {
	out := new(SGetResults)
	err := c.cc.Invoke(ctx, "/game.GameService/GetResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Login(ctx context.Context, in *CLogin, opts ...grpc.CallOption) (*SLogin, error) {
	out := new(SLogin)
	err := c.cc.Invoke(ctx, "/game.GameService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) Logout(ctx context.Context, in *CLogout, opts ...grpc.CallOption) (*SLogout, error) {
	out := new(SLogout)
	err := c.cc.Invoke(ctx, "/game.GameService/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) MergeGenerator(ctx context.Context, in *CMergeGenerator, opts ...grpc.CallOption) (*SMergeGenerator, error) {
	out := new(SMergeGenerator)
	err := c.cc.Invoke(ctx, "/game.GameService/MergeGenerator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PlayerOffline(ctx context.Context, in *CPlayerOffline, opts ...grpc.CallOption) (*SPlayerOffline, error) {
	out := new(SPlayerOffline)
	err := c.cc.Invoke(ctx, "/game.GameService/PlayerOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) SyncModel(ctx context.Context, in *CSyncModel, opts ...grpc.CallOption) (*SSyncModel, error) {
	out := new(SSyncModel)
	err := c.cc.Invoke(ctx, "/game.GameService/SyncModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) UnlockMaterialSlot(ctx context.Context, in *CUnlockMaterialSlot, opts ...grpc.CallOption) (*SUnlockMaterialSlot, error) {
	out := new(SUnlockMaterialSlot)
	err := c.cc.Invoke(ctx, "/game.GameService/UnlockMaterialSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	ChangePlayerName(context.Context, *CChangePlayerName) (*SChangePlayerName, error)
	CheckTime(context.Context, *CCheckTime) (*SCheckTime, error)
	GetCumulativeLoginDays(context.Context, *CGetCumulativeLoginDays) (*SGetCumulativeLoginDays, error)
	GetDiamondCount(context.Context, *CGetDiamondCount) (*SGetDiamondCount, error)
	GetEnergyData(context.Context, *CGetEnergyData) (*SGetEnergyData, error)
	GetGoldCount(context.Context, *CGetGoldCount) (*SGetGoldCount, error)
	GetLevelExp(context.Context, *CGetLevelExp) (*SGetLevelExp, error)
	GetMaterials(context.Context, *CGetMaterials) (*SGetMaterials, error)
	GetOrderList(context.Context, *CGetOrderList) (*SGetOrderList, error)
	GetPlayerName(context.Context, *CGetPlayerName) (*SGetPlayerName, error)
	GetProfile(context.Context, *CGetProfile) (*SGetProfile, error)
	GetResults(context.Context, *CGetResults) (*SGetResults, error)
	Login(context.Context, *CLogin) (*SLogin, error)
	Logout(context.Context, *CLogout) (*SLogout, error)
	MergeGenerator(context.Context, *CMergeGenerator) (*SMergeGenerator, error)
	PlayerOffline(context.Context, *CPlayerOffline) (*SPlayerOffline, error)
	SyncModel(context.Context, *CSyncModel) (*SSyncModel, error)
	UnlockMaterialSlot(context.Context, *CUnlockMaterialSlot) (*SUnlockMaterialSlot, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) ChangePlayerName(context.Context, *CChangePlayerName) (*SChangePlayerName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePlayerName not implemented")
}
func (UnimplementedGameServiceServer) CheckTime(context.Context, *CCheckTime) (*SCheckTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTime not implemented")
}
func (UnimplementedGameServiceServer) GetCumulativeLoginDays(context.Context, *CGetCumulativeLoginDays) (*SGetCumulativeLoginDays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCumulativeLoginDays not implemented")
}
func (UnimplementedGameServiceServer) GetDiamondCount(context.Context, *CGetDiamondCount) (*SGetDiamondCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiamondCount not implemented")
}
func (UnimplementedGameServiceServer) GetEnergyData(context.Context, *CGetEnergyData) (*SGetEnergyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnergyData not implemented")
}
func (UnimplementedGameServiceServer) GetGoldCount(context.Context, *CGetGoldCount) (*SGetGoldCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoldCount not implemented")
}
func (UnimplementedGameServiceServer) GetLevelExp(context.Context, *CGetLevelExp) (*SGetLevelExp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelExp not implemented")
}
func (UnimplementedGameServiceServer) GetMaterials(context.Context, *CGetMaterials) (*SGetMaterials, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterials not implemented")
}
func (UnimplementedGameServiceServer) GetOrderList(context.Context, *CGetOrderList) (*SGetOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderList not implemented")
}
func (UnimplementedGameServiceServer) GetPlayerName(context.Context, *CGetPlayerName) (*SGetPlayerName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerName not implemented")
}
func (UnimplementedGameServiceServer) GetProfile(context.Context, *CGetProfile) (*SGetProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedGameServiceServer) GetResults(context.Context, *CGetResults) (*SGetResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (UnimplementedGameServiceServer) Login(context.Context, *CLogin) (*SLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGameServiceServer) Logout(context.Context, *CLogout) (*SLogout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedGameServiceServer) MergeGenerator(context.Context, *CMergeGenerator) (*SMergeGenerator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeGenerator not implemented")
}
func (UnimplementedGameServiceServer) PlayerOffline(context.Context, *CPlayerOffline) (*SPlayerOffline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerOffline not implemented")
}
func (UnimplementedGameServiceServer) SyncModel(context.Context, *CSyncModel) (*SSyncModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncModel not implemented")
}
func (UnimplementedGameServiceServer) UnlockMaterialSlot(context.Context, *CUnlockMaterialSlot) (*SUnlockMaterialSlot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockMaterialSlot not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_ChangePlayerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CChangePlayerName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).ChangePlayerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/ChangePlayerName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).ChangePlayerName(ctx, req.(*CChangePlayerName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CheckTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CCheckTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CheckTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/CheckTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CheckTime(ctx, req.(*CCheckTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetCumulativeLoginDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetCumulativeLoginDays)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetCumulativeLoginDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetCumulativeLoginDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetCumulativeLoginDays(ctx, req.(*CGetCumulativeLoginDays))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetDiamondCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetDiamondCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetDiamondCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetDiamondCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetDiamondCount(ctx, req.(*CGetDiamondCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetEnergyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetEnergyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetEnergyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetEnergyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetEnergyData(ctx, req.(*CGetEnergyData))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetGoldCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetGoldCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGoldCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetGoldCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGoldCount(ctx, req.(*CGetGoldCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetLevelExp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetLevelExp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetLevelExp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetLevelExp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetLevelExp(ctx, req.(*CGetLevelExp))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetMaterials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetMaterials(ctx, req.(*CGetMaterials))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetOrderList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetOrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetOrderList(ctx, req.(*CGetOrderList))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetPlayerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetPlayerName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetPlayerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetPlayerName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetPlayerName(ctx, req.(*CGetPlayerName))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetProfile(ctx, req.(*CGetProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CGetResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/GetResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetResults(ctx, req.(*CGetResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Login(ctx, req.(*CLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CLogout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).Logout(ctx, req.(*CLogout))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_MergeGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CMergeGenerator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).MergeGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/MergeGenerator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).MergeGenerator(ctx, req.(*CMergeGenerator))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PlayerOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CPlayerOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PlayerOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/PlayerOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PlayerOffline(ctx, req.(*CPlayerOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_SyncModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CSyncModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).SyncModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/SyncModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).SyncModel(ctx, req.(*CSyncModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_UnlockMaterialSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CUnlockMaterialSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).UnlockMaterialSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameService/UnlockMaterialSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).UnlockMaterialSlot(ctx, req.(*CUnlockMaterialSlot))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangePlayerName",
			Handler:    _GameService_ChangePlayerName_Handler,
		},
		{
			MethodName: "CheckTime",
			Handler:    _GameService_CheckTime_Handler,
		},
		{
			MethodName: "GetCumulativeLoginDays",
			Handler:    _GameService_GetCumulativeLoginDays_Handler,
		},
		{
			MethodName: "GetDiamondCount",
			Handler:    _GameService_GetDiamondCount_Handler,
		},
		{
			MethodName: "GetEnergyData",
			Handler:    _GameService_GetEnergyData_Handler,
		},
		{
			MethodName: "GetGoldCount",
			Handler:    _GameService_GetGoldCount_Handler,
		},
		{
			MethodName: "GetLevelExp",
			Handler:    _GameService_GetLevelExp_Handler,
		},
		{
			MethodName: "GetMaterials",
			Handler:    _GameService_GetMaterials_Handler,
		},
		{
			MethodName: "GetOrderList",
			Handler:    _GameService_GetOrderList_Handler,
		},
		{
			MethodName: "GetPlayerName",
			Handler:    _GameService_GetPlayerName_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _GameService_GetProfile_Handler,
		},
		{
			MethodName: "GetResults",
			Handler:    _GameService_GetResults_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _GameService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _GameService_Logout_Handler,
		},
		{
			MethodName: "MergeGenerator",
			Handler:    _GameService_MergeGenerator_Handler,
		},
		{
			MethodName: "PlayerOffline",
			Handler:    _GameService_PlayerOffline_Handler,
		},
		{
			MethodName: "SyncModel",
			Handler:    _GameService_SyncModel_Handler,
		},
		{
			MethodName: "UnlockMaterialSlot",
			Handler:    _GameService_UnlockMaterialSlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game/game.grpc.proto",
}
